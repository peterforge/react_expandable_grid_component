{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nexports.__esModule = true;\n\nvar crypto_extra_1 = __importDefault(require(\"crypto-extra\"));\n\nvar _data_1 = __importDefault(require(\"./_data\"));\n\nvar Word;\n\n(function (Word) {\n  Word[\"Adjective\"] = \"adjectives\";\n  Word[\"Noun\"] = \"nouns\";\n  Word[\"Verb\"] = \"verbs\";\n})(Word || (Word = {}));\n\nfunction randomFromArray(arr) {\n  return arr[crypto_extra_1[\"default\"].randomNumber({\n    max: arr.length - 1\n  })];\n}\n\nexports.randomFromArray = randomFromArray;\n\nfunction getPattern(count) {\n  switch (count) {\n    case 0:\n      return [];\n\n    case 1:\n      return [Word.Noun];\n\n    case 3:\n      return [Word.Adjective, Word.Noun, Word.Verb];\n\n    case 4:\n      return [Word.Adjective, Word.Noun, Word.Noun, Word.Verb];\n\n    case 2:\n    default:\n      return randomFromArray([[Word.Adjective, Word.Noun], [Word.Noun, Word.Verb]]);\n  }\n}\n\nexports.getPattern = getPattern;\n\nfunction getSalt(type, length) {\n  var charset;\n\n  switch (type) {\n    case \"string\":\n      charset = \"abcdefghijklmnopqrstuvwxyz\";\n      break;\n\n    case \"number\":\n      charset = \"0123456789\";\n      break;\n\n    case \"mixed\":\n    default:\n      charset = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n  }\n\n  return crypto_extra_1[\"default\"].randomString(length, charset);\n}\n\nexports.getSalt = getSalt;\n\nfunction default_1(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  if (opts.char) {\n    console.log(\"namor.generate(): `char` option has been renamed to `separator`\");\n    opts.separator = opts.char;\n  }\n\n  if (opts.numbers) {\n    console.log(\"namor.generate(): `numbers` option has been renamed to `saltLength`/`saltType`\");\n    opts.saltLength = opts.numbers;\n    opts.saltType = \"number\";\n  }\n\n  if (opts.manly) {\n    console.log(\"namor.generate(): `manly` option is deprecated, use `subset` instead\");\n    opts.subset = \"manly\";\n  }\n\n  if (opts.words && (opts.words < 1 || opts.words > 4)) {\n    throw new TypeError(\"Word count must be between 1-4\");\n  }\n\n  opts.separator = opts.separator || \"-\";\n  opts.words = Number(opts.words !== undefined ? opts.words : 2);\n  opts.saltType = opts.saltType || \"mixed\";\n  opts.saltLength = Number(opts.saltLength !== undefined ? opts.saltLength : 5);\n  var dictionary = opts.subset ? _data_1[\"default\"][opts.subset] : _data_1[\"default\"];\n  var salt = opts.saltLength > 0 ? getSalt(opts.saltType, opts.saltLength) : null;\n  var name = getPattern(opts.words).map(function (type) {\n    return randomFromArray(dictionary[type]);\n  }).concat([salt]).filter(Boolean).join(opts.separator);\n\n  if (name.length > 63) {\n    throw new TypeError(\"Subdomains cannot be longer than 63 characters! Try shortening your trailing salt.\");\n  }\n\n  return name;\n}\n\nexports[\"default\"] = default_1;","map":{"version":3,"names":["__importDefault","mod","__esModule","exports","crypto_extra_1","require","_data_1","Word","randomFromArray","arr","randomNumber","max","length","getPattern","count","Noun","Adjective","Verb","getSalt","type","charset","randomString","default_1","opts","char","console","log","separator","numbers","saltLength","saltType","manly","subset","words","TypeError","Number","undefined","dictionary","salt","name","map","concat","filter","Boolean","join"],"sources":["/Users/peterbirlem/Documents/QuickSilver_DSM/react_expandable_grid_component/node_modules/namor/dist/generate.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nexports.__esModule = true;\nvar crypto_extra_1 = __importDefault(require(\"crypto-extra\"));\nvar _data_1 = __importDefault(require(\"./_data\"));\nvar Word;\n(function (Word) {\n    Word[\"Adjective\"] = \"adjectives\";\n    Word[\"Noun\"] = \"nouns\";\n    Word[\"Verb\"] = \"verbs\";\n})(Word || (Word = {}));\nfunction randomFromArray(arr) {\n    return arr[crypto_extra_1[\"default\"].randomNumber({ max: arr.length - 1 })];\n}\nexports.randomFromArray = randomFromArray;\nfunction getPattern(count) {\n    switch (count) {\n        case 0:\n            return [];\n        case 1:\n            return [Word.Noun];\n        case 3:\n            return [Word.Adjective, Word.Noun, Word.Verb];\n        case 4:\n            return [Word.Adjective, Word.Noun, Word.Noun, Word.Verb];\n        case 2:\n        default:\n            return randomFromArray([\n                [Word.Adjective, Word.Noun],\n                [Word.Noun, Word.Verb],\n            ]);\n    }\n}\nexports.getPattern = getPattern;\nfunction getSalt(type, length) {\n    var charset;\n    switch (type) {\n        case \"string\":\n            charset = \"abcdefghijklmnopqrstuvwxyz\";\n            break;\n        case \"number\":\n            charset = \"0123456789\";\n            break;\n        case \"mixed\":\n        default:\n            charset = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n    }\n    return crypto_extra_1[\"default\"].randomString(length, charset);\n}\nexports.getSalt = getSalt;\nfunction default_1(opts) {\n    if (opts === void 0) { opts = {}; }\n    if (opts.char) {\n        console.log(\"namor.generate(): `char` option has been renamed to `separator`\");\n        opts.separator = opts.char;\n    }\n    if (opts.numbers) {\n        console.log(\"namor.generate(): `numbers` option has been renamed to `saltLength`/`saltType`\");\n        opts.saltLength = opts.numbers;\n        opts.saltType = \"number\";\n    }\n    if (opts.manly) {\n        console.log(\"namor.generate(): `manly` option is deprecated, use `subset` instead\");\n        opts.subset = \"manly\";\n    }\n    if (opts.words && (opts.words < 1 || opts.words > 4)) {\n        throw new TypeError(\"Word count must be between 1-4\");\n    }\n    opts.separator = opts.separator || \"-\";\n    opts.words = Number(opts.words !== undefined ? opts.words : 2);\n    opts.saltType = opts.saltType || \"mixed\";\n    opts.saltLength = Number(opts.saltLength !== undefined ? opts.saltLength : 5);\n    var dictionary = opts.subset ? _data_1[\"default\"][opts.subset] : _data_1[\"default\"];\n    var salt = opts.saltLength > 0 ? getSalt(opts.saltType, opts.saltLength) : null;\n    var name = getPattern(opts.words)\n        .map(function (type) { return randomFromArray(dictionary[type]); })\n        .concat([salt])\n        .filter(Boolean)\n        .join(opts.separator);\n    if (name.length > 63) {\n        throw new TypeError(\"Subdomains cannot be longer than 63 characters! Try shortening your trailing salt.\");\n    }\n    return name;\n}\nexports[\"default\"] = default_1;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}